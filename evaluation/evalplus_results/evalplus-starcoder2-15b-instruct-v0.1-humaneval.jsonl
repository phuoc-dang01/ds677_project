{"task_id": "HumanEval/0", "completion": "\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i + 1] - numbers[i] < threshold:\n            return True\n    return False\n"}
{"task_id": "HumanEval/1", "completion": "\n    stack = []\n    groups = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) > 0:\n                stack.pop()\n            else:\n                continue\n        else:\n            continue\n        if len(stack) == 0:\n            groups.append(''.join(char for char in paren_string[paren_string.index('('):paren_string.index(')') + 1]))\n\n    return groups\n"}
{"task_id": "HumanEval/2", "completion": "\n    return number - int(number)\n"}
{"task_id": "HumanEval/3", "completion": "\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n"}
{"task_id": "HumanEval/4", "completion": "\n    mean = sum(numbers) / len(numbers)\n    differences = [abs(x - mean) for x in numbers]\n    return sum(differences) / len(numbers)\n"}
{"task_id": "HumanEval/5", "completion": "\n    result = []\n    for index, number in enumerate(numbers):\n        result.append(number)\n        if index < len(numbers) - 1:\n            result.append(delimeter)\n    return result\n"}
{"task_id": "HumanEval/6", "completion": "\n    groups = paren_string.split()\n    deepest_levels = []\n    for group in groups:\n        max_depth = 0\n        depth = 0\n        for char in group:\n            if char == \"(\":\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == \")\":\n                depth -= 1\n        deepest_levels.append(max_depth)\n    return deepest_levels\n"}
{"task_id": "HumanEval/7", "completion": "\n    return [s for s in strings if substring in s]\n"}
{"task_id": "HumanEval/8", "completion": "\n    sum_val = 0\n    product_val = 1\n    for num in numbers:\n        sum_val += num\n        product_val *= num\n    return sum_val, product_val\n"}
{"task_id": "HumanEval/9", "completion": "\n    result = []\n    for i in range(len(numbers)):\n        result.append(max(numbers[i:]))\n    return result\n"}
{"task_id": "HumanEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)-1, 0, -1):\n        if is_palindrome(string[i:]):\n            return string + string[i-1::-1]\n"}
{"task_id": "HumanEval/11", "completion": "\n    result = \"\"\n    for i in range(len(a)):\n        result += str(int(a[i]) ^ int(b[i]))\n    return result\n"}
{"task_id": "HumanEval/12", "completion": "\n    if not strings:\n        return None\n\n    longest_length = max(len(s) for s in strings)\n    longest_strings = [s for s in strings if len(s) == longest_length]\n\n    return longest_strings[0]\n"}
{"task_id": "HumanEval/13", "completion": "\n    while b!= 0:\n        a, b = b, a % b\n    return a\n"}
{"task_id": "HumanEval/14", "completion": "\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes\n"}
{"task_id": "HumanEval/15", "completion": "\n    return \" \".join(map(str, range(n+1)))\n"}
{"task_id": "HumanEval/16", "completion": "\n    distinct_characters = set()\n    for char in string.lower():\n        distinct_characters.add(char)\n    return len(distinct_characters)\n"}
{"task_id": "HumanEval/17", "completion": "\n    beats = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1,\n    }\n    result = []\n    for note in music_string.split():\n        result.append(beats[note])\n    return result\n"}
{"task_id": "HumanEval/18", "completion": "\n    if not string or not substring:\n        return 0\n    count = 0\n    start = 0\n    while True:\n        index = string.find(substring, start)\n        if index == -1:\n            break\n        count += 1\n        start = index + 1\n    return count\n"}
{"task_id": "HumanEval/19", "completion": "\n    number_map = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    number_list = numbers.split()\n    sorted_list = sorted(number_list, key=lambda x: number_map[x])\n    return \" \".join(sorted_list)\n"}
{"task_id": "HumanEval/20", "completion": "\n    numbers.sort()\n    min_diff = float(\"inf\")\n    min_pair = ()\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            min_pair = (numbers[i], numbers[i + 1])\n    return min_pair\n"}
{"task_id": "HumanEval/21", "completion": "\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]\n"}
{"task_id": "HumanEval/22", "completion": "\n    return [value for value in values if isinstance(value, int)]\n"}
{"task_id": "HumanEval/23", "completion": "\n    return len(string)\n"}
{"task_id": "HumanEval/24", "completion": "\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i\n    return 1\n"}
{"task_id": "HumanEval/25", "completion": "\n    factors = []\n    factor = 2\n    while n > 1:\n        if n % factor == 0:\n            factors.append(factor)\n            n //= factor\n        else:\n            factor += 1\n    return factors\n"}
{"task_id": "HumanEval/26", "completion": "\n    unique_numbers = set()\n    result = []\n    for number in numbers:\n        if number not in unique_numbers:\n            unique_numbers.add(number)\n            result.append(number)\n    return result\n"}
{"task_id": "HumanEval/27", "completion": "\n    return ''.join(char.swapcase() for char in string)\n"}
{"task_id": "HumanEval/28", "completion": "\n    return \"\".join(strings)\n"}
{"task_id": "HumanEval/29", "completion": "\n    return [s for s in strings if s.startswith(prefix)]\n"}
{"task_id": "HumanEval/30", "completion": "\n    return [x for x in l if x > 0]\n"}
{"task_id": "HumanEval/31", "completion": "\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "HumanEval/32", "completion": "\n    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have an even number of coefficients\")\n    if xs[-1] == 0:\n        raise ValueError(\"The largest non-zero coefficient must be non-zero\")\n    def newton_raphson(x):\n        return x - poly(xs, x) / poly([i * coeff for i, coeff in enumerate(xs, 1)], x)\n    x = 0\n    for _ in range(100):\n        x = newton_raphson(x)\n    return x\n"}
{"task_id": "HumanEval/33", "completion": "\n    l_prime = []\n    for i, val in enumerate(l):\n        if i % 3 == 0:\n            l_prime.append(sorted(l[i:i+3]))\n        else:\n            l_prime.append(val)\n    return [item for sublist in l_prime for item in sublist]\n"}
{"task_id": "HumanEval/34", "completion": "\n    return sorted(set(l))\n"}
{"task_id": "HumanEval/35", "completion": "\n    max_element = l[0]\n    for element in l:\n        if element > max_element:\n            max_element = element\n    return max_element\n"}
{"task_id": "HumanEval/36", "completion": "\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n"}
{"task_id": "HumanEval/37", "completion": "\n    even_indicies = [i for i in range(len(l)) if i % 2 == 0]\n    even_values = [l[i] for i in even_indicies]\n    sorted_even_values = sorted(even_values)\n    result = [None] * len(l)\n    for i in even_indicies:\n        result[i] = sorted_even_values.pop(0)\n    for i in range(len(l)):\n        if i not in even_indicies:\n            result[i] = l[i]\n    return result\n"}
{"task_id": "HumanEval/38", "completion": "\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1:] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"}
{"task_id": "HumanEval/39", "completion": "\n    fib_list = [0, 1]\n    while len(fib_list) < n:\n        fib_list.append(fib_list[-1] + fib_list[-2])\n    prime_fib_list = [num for num in fib_list if is_prime(num)]\n    return prime_fib_list[n - 1]\n\n\ndef is_prime(num: int):\n    \"\"\"\n    is_prime checks if a number is prime.\n    \"\"\"\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n"}
{"task_id": "HumanEval/40", "completion": "\n    if len(l) < 3:\n        return False\n    for i in range(len(l) - 2):\n        for j in range(i + 1, len(l) - 1):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n"}
{"task_id": "HumanEval/41", "completion": "\n    return n\n"}
{"task_id": "HumanEval/42", "completion": "\n    return [x + 1 for x in l]\n"}
{"task_id": "HumanEval/43", "completion": "\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n"}
{"task_id": "HumanEval/44", "completion": "\n    res = \"\"\n    while x > 0:\n        res = str(x % base) + res\n        x //= base\n    return res\n"}
{"task_id": "HumanEval/45", "completion": "\n    return 0.5 * a * h\n"}
{"task_id": "HumanEval/46", "completion": "\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    fib_list = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib_list.append(fib_list[i - 1] + fib_list[i - 2] + fib_list[i - 3] + fib_list[i - 4])\n    return fib_list[-1]\n"}
{"task_id": "HumanEval/47", "completion": "\n    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n"}
{"task_id": "HumanEval/48", "completion": "\n    return text == text[::-1]\n"}
{"task_id": "HumanEval/49", "completion": "\n    if n == 0:\n        return 1 % p\n    if n % 2 == 0:\n        return (modp(n // 2, p) ** 2) % p\n    else:\n        return (2 * modp(n // 2, p) ** 2) % p\n"}
{"task_id": "HumanEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"}
{"task_id": "HumanEval/51", "completion": "\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result\n"}
{"task_id": "HumanEval/52", "completion": "\n    for num in l:\n        if num >= t:\n            return False\n    return True\n"}
{"task_id": "HumanEval/53", "completion": "\n    return x + y\n"}
{"task_id": "HumanEval/54", "completion": "\n    s0 = sorted(s0)\n    s1 = sorted(s1)\n    return s0 == s1\n"}
{"task_id": "HumanEval/55", "completion": "\n    if n <= 2:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n"}
{"task_id": "HumanEval/56", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "HumanEval/57", "completion": "\n    if len(l) < 2:\n        return True\n    direction = l[1] - l[0]\n    for i in range(1, len(l) - 1):\n        diff = l[i + 1] - l[i]\n        if diff == 0:\n            continue\n        if direction == 0:\n            direction = diff\n        elif direction * diff < 0:\n            return False\n    return True\n"}
{"task_id": "HumanEval/58", "completion": "\n    return sorted(set(l1) & set(l2))\n"}
{"task_id": "HumanEval/59", "completion": "\n    if n < 2:\n        raise ValueError(\"n must be greater than 1\")\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return largest_prime_factor(n // 2)\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return largest_prime_factor(n // i)\n    return n\n"}
{"task_id": "HumanEval/60", "completion": "\n    return n * (n + 1) // 2\n"}
{"task_id": "HumanEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "HumanEval/62", "completion": "\n    derivative = []\n    for i, x in enumerate(xs):\n        derivative.append(x * i)\n    return derivative[1:]\n"}
{"task_id": "HumanEval/63", "completion": "\n    if n == 0 or n == 1:\n        return 0\n    if n == 2:\n        return 1\n    a, b, c = 0, 0, 1\n    for _ in range(3, n + 1):\n        a, b, c = b, c, a + b + c\n    return c\n"}
{"task_id": "HumanEval/64", "completion": "\n    vowels = 'aeiou'\n    count = 0\n    for char in s.lower():\n        if char in vowels:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/65", "completion": "\n    x_str = str(x)\n    x_len = len(x_str)\n    if shift > x_len:\n        return x_str[::-1]\n    else:\n        return x_str[x_len - shift:] + x_str[:x_len - shift]\n"}
{"task_id": "HumanEval/66", "completion": "\n    sum = 0\n    for c in s:\n        if c.isupper():\n            sum += ord(c)\n    return sum\n"}
{"task_id": "HumanEval/67", "completion": "\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    mangoes = n - apples - oranges\n    return mangoes\n"}
{"task_id": "HumanEval/68", "completion": "\n    smallest_even_value = float('inf')\n    smallest_even_index = -1\n    for i, value in enumerate(arr):\n        if value % 2 == 0 and value < smallest_even_value:\n            smallest_even_value = value\n            smallest_even_index = i\n    if smallest_even_value == float('inf'):\n        return []\n    return [smallest_even_value, smallest_even_index]\n"}
{"task_id": "HumanEval/69", "completion": "\n    freq = {}\n    for num in lst:\n        freq[num] = freq.get(num, 0) + 1\n    for num in sorted(freq, reverse=True):\n        if freq[num] >= num:\n            return num\n    return -1\n"}
{"task_id": "HumanEval/70", "completion": "\n    result = []\n    while lst:\n        result.append(min(lst))\n        lst.remove(min(lst))\n        if lst:\n            result.append(max(lst))\n            lst.remove(max(lst))\n    return result\n"}
{"task_id": "HumanEval/71", "completion": "\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return round(area, 2)\n"}
{"task_id": "HumanEval/72", "completion": "\n    def is_palindrome(lst):\n        return lst == lst[::-1]\n    return is_palindrome(q) and sum(q) <= w\n"}
{"task_id": "HumanEval/73", "completion": "\n    n = len(arr)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for l in range(2, n + 1):\n        for i in range(n - l + 1):\n            j = i + l - 1\n            if arr[i] == arr[j]:\n                dp[i][j] = dp[i + 1][j - 1]\n            else:\n                dp[i][j] = 1 + min(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][n - 1]\n"}
{"task_id": "HumanEval/74", "completion": "\n    total_lst1 = sum(len(s) for s in lst1)\n    total_lst2 = sum(len(s) for s in lst2)\n    if total_lst1 < total_lst2:\n        return lst1\n    elif total_lst2 < total_lst1:\n        return lst2\n    else:\n        return lst1\n"}
{"task_id": "HumanEval/75", "completion": "\n    prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    if a in prime_numbers:\n        return False\n    for i in prime_numbers:\n        for j in prime_numbers:\n            for k in prime_numbers:\n                if i * j * k == a:\n                    return True\n    return False\n"}
{"task_id": "HumanEval/76", "completion": "\n    if x == 1:\n        return True\n    if x == n:\n        return False\n    while x % n == 0:\n        x //= n\n    return x == 1\n"}
{"task_id": "HumanEval/77", "completion": "\n    if a == 0:\n        return True\n    if a < 0:\n        a = -a\n    x = a ** (1/3)\n    if x.is_integer():\n        return True\n    return False\n"}
{"task_id": "HumanEval/78", "completion": "\n    prime_digits = {2, 3, 5, 7, 11, 13}\n    count = 0\n    for digit in num:\n        if int(digit, 16) in prime_digits:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/79", "completion": "\n    binary = bin(decimal)[2:]\n    return \"db\" + binary + \"db\"\n"}
{"task_id": "HumanEval/80", "completion": "\n    if len(s) < 3:\n        return False\n\n    for i in range(0, len(s) - 2):\n        if s[i] == s[i+1] == s[i+2]:\n            return False\n\n    return True\n"}
{"task_id": "HumanEval/81", "completion": "\n    letter_grades = []\n    for gpa in grades:\n        if gpa >= 4.0:\n            letter_grades.append('A+')\n        elif gpa >= 3.7:\n            letter_grades.append('A')\n        elif gpa >= 3.3:\n            letter_grades.append('A-')\n        elif gpa >= 3.0:\n            letter_grades.append('B+')\n        elif gpa >= 2.7:\n            letter_grades.append('B')\n        elif gpa >= 2.3:\n            letter_grades.append('B-')\n        elif gpa >= 2.0:\n            letter_grades.append('C+')\n        elif gpa >= 1.7:\n            letter_grades.append('C')\n        elif gpa >= 1.3:\n            letter_grades.append('C-')\n        elif gpa >= 1.0:\n            letter_grades.append('D+')\n        elif gpa >= 0.7:\n            letter_grades.append('D')\n        elif gpa >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n"}
{"task_id": "HumanEval/82", "completion": "\n    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, length):\n        if length % i == 0:\n            return False\n    return True\n"}
{"task_id": "HumanEval/83", "completion": "\n    if n == 1:\n        return 2\n    return 10 * starts_one_ends(n - 1)\n"}
{"task_id": "HumanEval/84", "completion": "\n    binary_string = bin(N)[2:]\n    total_sum = sum(int(digit) for digit in binary_string)\n    return str(total_sum)\n"}
{"task_id": "HumanEval/85", "completion": "\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 == 0)\n"}
{"task_id": "HumanEval/86", "completion": "\n    words = s.split()\n    for i, word in enumerate(words):\n        words[i] = \"\".join(sorted(word))\n    return \" \".join(words)\n"}
{"task_id": "HumanEval/87", "completion": "\n    coordinates = []\n    for row, values in enumerate(lst):\n        for col, val in enumerate(values):\n            if val == x:\n                coordinates.append((row, col))\n    coordinates.sort(key=lambda x: (x[0], -x[1]))\n    return coordinates\n"}
{"task_id": "HumanEval/88", "completion": "\n    if not array:\n        return []\n    if len(array) == 1:\n        return array\n    first = array[0]\n    last = array[-1]\n    if (first + last) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)\n"}
{"task_id": "HumanEval/89", "completion": "\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    rotated_alphabet = alphabet[2:] + alphabet[:2]\n    encrypted_string = ''\n    for char in s:\n        if char.isalpha():\n            index = alphabet.index(char)\n            encrypted_string += rotated_alphabet[index]\n        else:\n            encrypted_string += char\n    return encrypted_string\n"}
{"task_id": "HumanEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    \n    lst.sort()\n    for i in range(1, len(lst)):\n        if lst[i]!= lst[i-1]:\n            return lst[i]\n    \n    return None\n"}
{"task_id": "HumanEval/91", "completion": "\n    boredoms = 0\n    sentences = S.split('.')\n    for sentence in sentences:\n        words = sentence.split()\n        if len(words) > 0 and words[0] == 'I':\n            boredoms += 1\n    return boredoms\n"}
{"task_id": "HumanEval/92", "completion": "\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n    return x == y + z or y == x + z or z == x + y\n"}
{"task_id": "HumanEval/93", "completion": "\n    vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_message += chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                encoded_message += chr(ord(char) ^ 32)\n        else:\n            encoded_message += char\n    return encoded_message\n"}
{"task_id": "HumanEval/94", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    max_prime = -1\n    for num in lst:\n        if is_prime(num):\n            max_prime = max(max_prime, num)\n    if max_prime < 0:\n        return 0\n    return sum(int(digit) for digit in str(max_prime))\n"}
{"task_id": "HumanEval/95", "completion": "\n    if not dict:\n        return False\n    first_key = next(iter(dict))\n    if isinstance(first_key, str):\n        return all(isinstance(key, str) and (key.islower() or key.isupper()) for key in dict)\n    else:\n        return False\n"}
{"task_id": "HumanEval/96", "completion": "\n    if n < 2:\n        return []\n    primes = [2]\n    for i in range(3, n, 2):\n        is_prime = True\n        for p in primes:\n            if i % p == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n"}
{"task_id": "HumanEval/97", "completion": "\n    return (a % 10) * (b % 10)\n"}
{"task_id": "HumanEval/98", "completion": "\n    vowels = 'AEIOU'\n    count = 0\n    for i, c in enumerate(s):\n        if i % 2 == 0 and c in vowels:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/99", "completion": "\n    number = float(value)\n    rounded = round(number)\n    if number > 0:\n        return rounded if abs(number - rounded) < 0.5 else rounded + 1\n    else:\n        return rounded if abs(number - rounded) <= 0.5 else rounded - 1\n"}
{"task_id": "HumanEval/100", "completion": "\n    if n <= 0:\n        return []\n\n    stones = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            n += 2\n        else:\n            n += 1\n        stones.append(n)\n\n    return stones\n"}
{"task_id": "HumanEval/101", "completion": "\n    return s.replace(\",\", \" \").split()\n"}
{"task_id": "HumanEval/102", "completion": "\n    if x > y:\n        return -1\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n    return -1\n"}
{"task_id": "HumanEval/103", "completion": "\n    if n > m:\n        return -1\n    total = 0\n    for i in range(n, m+1):\n        total += i\n    avg = total / (m - n + 1)\n    rounded_avg = round(avg)\n    binary_avg = bin(rounded_avg)\n    return binary_avg\n"}
{"task_id": "HumanEval/104", "completion": "\n    def has_even_digit(num):\n        while num > 0:\n            digit = num % 10\n            if digit % 2 == 0:\n                return True\n            num //= 10\n        return False\n    \n    result = []\n    for num in x:\n        if not has_even_digit(num):\n            result.append(num)\n    result.sort()\n    return result\n"}
{"task_id": "HumanEval/105", "completion": "\n    if not arr:\n        return []\n    digits = [str(d) for d in arr if 1 <= d <= 9]\n    digits.sort(reverse=True)\n    return [\n        \"One\",\n        \"Two\",\n        \"Three\",\n        \"Four\",\n        \"Five\",\n        \"Six\",\n        \"Seven\",\n        \"Eight\",\n        \"Nine\",\n    ][: len(digits)]\n"}
{"task_id": "HumanEval/106", "completion": "\n    def factorial(num):\n        if num <= 1:\n            return 1\n        return num * factorial(num - 1)\n\n    def sum_from_1_to_n(num):\n        return num * (num + 1) // 2\n\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_from_1_to_n(i))\n    return result\n"}
{"task_id": "HumanEval/107", "completion": "\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)\n"}
{"task_id": "HumanEval/108", "completion": "\n    count = 0\n    for num in arr:\n        if sum(int(digit) for digit in str(num)) > 0:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/109", "completion": "\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        shifted_arr = arr[i:] + arr[:i]\n        if shifted_arr == sorted_arr:\n            return True\n    return False\n"}
{"task_id": "HumanEval/110", "completion": "\n    even_count = sum(1 for x in lst1 if x % 2 == 0)\n    odd_count = len(lst1) - even_count\n    if even_count == len(lst1):\n        return \"YES\"\n    for i in range(len(lst2)):\n        if lst2[i] % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        if even_count == len(lst1):\n            return \"YES\"\n        if i < len(lst2) - 1:\n            if lst2[i + 1] % 2 == 0:\n                even_count -= 1\n            else:\n                odd_count -= 1\n    return \"NO\"\n"}
{"task_id": "HumanEval/111", "completion": "\n    if not test:\n        return {}\n    \n    freq = {}\n    for letter in test.split():\n        freq[letter] = freq.get(letter, 0) + 1\n    \n    max_freq = max(freq.values())\n    return {letter: freq for letter, freq in freq.items() if freq == max_freq}\n"}
{"task_id": "HumanEval/112", "completion": "\n    result = \"\"\n    for char in s:\n        if char not in c:\n            result += char\n    return (result, result == result[::-1])\n"}
{"task_id": "HumanEval/113", "completion": "\n    output = []\n    for i, string in enumerate(lst):\n        count = 0\n        for digit in string:\n            if int(digit) % 2 == 1:\n                count += 1\n        output.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return output\n"}
{"task_id": "HumanEval/114", "completion": "\n    min_sum = float(\"inf\")\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        min_sum = min(min_sum, current_sum)\n        if current_sum > 0:\n            current_sum = 0\n    return min_sum\n"}
{"task_id": "HumanEval/115", "completion": "\n    num_rows = len(grid)\n    num_cols = len(grid[0])\n    num_buckets = num_rows\n    num_fills = 0\n    for i in range(num_rows):\n        for j in range(num_cols):\n            if grid[i][j] == 1:\n                num_fills += 1\n    num_fills_per_bucket = math.ceil(num_fills / num_buckets)\n    return num_fills_per_bucket\n"}
{"task_id": "HumanEval/116", "completion": "\n    def count_ones(num):\n        count = 0\n        while num > 0:\n            count += num & 1\n            num >>= 1\n        return count\n\n    return sorted(arr, key=lambda x: (count_ones(abs(x)), x))\n"}
{"task_id": "HumanEval/117", "completion": "\n    vowels = \"aeiou\"\n    words = s.split()\n    result = []\n    for word in words:\n        consonants = 0\n        for letter in word:\n            if letter.isalpha() and letter.lower() not in vowels:\n                consonants += 1\n        if consonants == n:\n            result.append(word)\n    return result\n"}
{"task_id": "HumanEval/118", "completion": "\n    vowels = set(\"aeiouAEIOU\")\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in vowels:\n            return word[i]\n    return \"\"\n"}
{"task_id": "HumanEval/119", "completion": "\n    stack = []\n    for s in lst:\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if not stack or stack[-1]!= '(':\n                    return 'No'\n                stack.pop()\n    return 'Yes' if not stack else 'No'\n"}
{"task_id": "HumanEval/120", "completion": "\n    arr.sort(reverse=True)\n    return arr[:k]\n"}
{"task_id": "HumanEval/121", "completion": "\n    result = 0\n    for idx, num in enumerate(lst):\n        if idx % 2 == 0 and num % 2 == 1:\n            result += num\n    return result\n"}
{"task_id": "HumanEval/122", "completion": "\n    total_sum = 0\n    for i in range(k):\n        if arr[i] < 100:\n            total_sum += arr[i]\n    return total_sum\n"}
{"task_id": "HumanEval/123", "completion": "\n    collatz_sequence = [n]\n    while n!= 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz_sequence.append(n)\n    odd_numbers = [num for num in collatz_sequence if num % 2 == 1]\n    odd_numbers.sort()\n    return odd_numbers\n"}
{"task_id": "HumanEval/124", "completion": "\n    if not date:\n        return False\n    date_parts = date.split('-')\n    if len(date_parts)!= 3:\n        return False\n    month, day, year = date_parts\n    if not (month and day and year):\n        return False\n    if not (month.isdigit() and day.isdigit() and year.isdigit()):\n        return False\n    month = int(month)\n    day = int(day)\n    year = int(year)\n    if not (1 <= month <= 12):\n        return False\n    if month in (1, 3, 5, 7, 8, 10, 12):\n        max_days = 31\n    elif month in (4, 6, 9, 11):\n        max_days = 30\n    elif month == 2:\n        max_days = 29\n    else:\n        return False\n    if not (1 <= day <= max_days):\n        return False\n    return True\n"}
{"task_id": "HumanEval/125", "completion": "\n    if'' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if ord(c) % 2 == 1)\n"}
{"task_id": "HumanEval/126", "completion": "\n    if len(lst) <= 1:\n        return True\n    prev = lst[0]\n    for curr in lst[1:]:\n        if curr < prev:\n            return False\n        if curr == prev:\n            return False\n        prev = curr\n    return True\n"}
{"task_id": "HumanEval/127", "completion": "\n    start1, end1 = interval1\n    start2, end2 = interval2\n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    intersection_length = intersection_end - intersection_start + 1\n    if intersection_length < 2:\n        return \"NO\"\n    for i in range(2, int(intersection_length ** 0.5) + 1):\n        if intersection_length % i == 0:\n            return \"NO\"\n    return \"YES\"\n"}
{"task_id": "HumanEval/128", "completion": "\n    if not arr:\n        return None\n\n    prod = 1\n    sum_magnitudes = 0\n\n    for num in arr:\n        if num == 0:\n            prod *= 0\n            break\n        elif num > 0:\n            prod *= 1\n        else:\n            prod *= -1\n\n        sum_magnitudes += abs(num)\n\n    return sum_magnitudes * prod\n"}
{"task_id": "HumanEval/129", "completion": "\n    N = len(grid)\n    min_path = [float('inf')] * k\n    min_path_values = [float('inf')] * k\n\n    def dfs(row, col, path, path_values):\n        if len(path) == k:\n            if path < min_path:\n                min_path[:] = path\n                min_path_values[:] = path_values\n            return\n\n        for r, c in [(row - 1, col), (row + 1, col), (row, col - 1), (row, col + 1)]:\n            if 0 <= r < N and 0 <= c < N and grid[r][c] not in path_values:\n                path.append(grid[r][c])\n                path_values.add(grid[r][c])\n                dfs(r, c, path, path_values)\n                path.pop()\n                path_values.remove(grid[r][c])\n\n    for row in range(N):\n        for col in range(N):\n            dfs(row, col, [grid[row][col]], {grid[row][col]})\n\n    return min_path_values\n"}
{"task_id": "HumanEval/130", "completion": "\n    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 3]\n    elif n == 3:\n        return [1, 3, 2, 8]\n    else:\n        sequence = [1, 3, 2, 8]\n        for i in range(4, n + 1):\n            if i % 2 == 0:\n                sequence.append(1 + i / 2)\n            else:\n                sequence.append(sequence[i - 1] + sequence[i - 2] + sequence[i + 1])\n        return sequence\n"}
{"task_id": "HumanEval/131", "completion": "\n    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            product *= digit\n        n //= 10\n    return product\n"}
{"task_id": "HumanEval/132", "completion": "\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n"}
{"task_id": "HumanEval/133", "completion": "\n    return sum(int(x)**2 for x in lst)\n"}
{"task_id": "HumanEval/134", "completion": "\n    if not txt:\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha() and last_char!= \" \":\n        return True\n    return False\n"}
{"task_id": "HumanEval/135", "completion": "\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            return i-1\n    return -1\n"}
{"task_id": "HumanEval/136", "completion": "\n    largest_negative = None\n    smallest_positive = None\n    for num in lst:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n    return (largest_negative, smallest_positive)\n"}
{"task_id": "HumanEval/137", "completion": "\n    if type(a)!= type(b):\n        return None\n    if type(a) in (int, float):\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n    if type(a) == str:\n        a = a.replace(\",\", \".\")\n        b = b.replace(\",\", \".\")\n        if float(a) > float(b):\n            return a\n        elif float(b) > float(a):\n            return b\n        else:\n            return None\n"}
{"task_id": "HumanEval/138", "completion": "\n    if n < 8:\n        return False\n    for a in range(2, n // 2 + 1, 2):\n        for b in range(a, n // 2 + 1, 2):\n            for c in range(b, n // 2 + 1, 2):\n                d = n - a - b - c\n                if d > 0 and d % 2 == 0:\n                    return True\n    return False\n"}
{"task_id": "HumanEval/139", "completion": "\n    if n <= 0:\n        return 1\n    result = 1\n    for i in range(n, 0, -1):\n        result *= i\n    return result\n"}
{"task_id": "HumanEval/140", "completion": "\n    result = \"\"\n    consecutive_spaces = 0\n    for char in text:\n        if char == \" \":\n            consecutive_spaces += 1\n            if consecutive_spaces > 2:\n                result += \"-\"\n            else:\n                result += \"_\"\n        else:\n            result += char\n            consecutive_spaces = 0\n    return result\n"}
{"task_id": "HumanEval/141", "completion": "\n    if len([c for c in file_name if c.isdigit()]) > 3:\n        return \"No\"\n    if file_name.count(\".\")!= 1:\n        return \"No\"\n    before_dot, after_dot = file_name.split(\".\")\n    if not before_dot or not before_dot[0].isalpha():\n        return \"No\"\n    if after_dot not in [\"txt\", \"exe\", \"dll\"]:\n        return \"No\"\n    return \"Yes\"\n"}
{"task_id": "HumanEval/142", "completion": "\n    sum = 0\n    for i, val in enumerate(lst):\n        if i % 3 == 0 and i % 4!= 0:\n            lst[i] = val * val\n        elif i % 4 == 0:\n            lst[i] = val * val * val\n        sum += lst[i]\n    return sum\n"}
{"task_id": "HumanEval/143", "completion": "\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    result = []\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n    return \" \".join(result)\n"}
{"task_id": "HumanEval/144", "completion": "\n    def fraction_to_float(fraction):\n        numerator, denominator = fraction.split(\"/\")\n        return float(numerator) / float(denominator)\n\n    x_float = fraction_to_float(x)\n    n_float = fraction_to_float(n)\n    product = x_float * n_float\n    return product.is_integer()\n"}
{"task_id": "HumanEval/145", "completion": "\n    def sum_of_digits(num):\n        num = abs(num)\n        return sum(int(digit) for digit in str(num))\n\n    return sorted(nums, key=sum_of_digits)\n"}
{"task_id": "HumanEval/146", "completion": "\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in '13579' and str(num)[-1] in '13579':\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/147", "completion": "\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(len(a) - 2):\n        for j in range(i + 1, len(a) - 1):\n            for k in range(j + 1, len(a)):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n"}
{"task_id": "HumanEval/148", "completion": "\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    planet1_index = planets.index(planet1)\n    planet2_index = planets.index(planet2)\n    if planet1_index > planet2_index:\n        planet1_index, planet2_index = planet2_index, planet1_index\n    return tuple(planets[planet1_index+1:planet2_index])\n"}
{"task_id": "HumanEval/149", "completion": "\n    def is_even(string):\n        return len(string) % 2 == 0\n\n    def sort_by_length(string1, string2):\n        if len(string1) == len(string2):\n            return string1 < string2\n        return len(string1) < len(string2)\n\n    even_length_words = list(filter(is_even, lst))\n    sorted_words = sorted(even_length_words, key=lambda word: len(word))\n    return sorted_words\n"}
{"task_id": "HumanEval/150", "completion": "\n    if n > 1:\n        for i in range(2, n):\n            if n % i == 0:\n                return y\n        return x\n    else:\n        return y\n"}
{"task_id": "HumanEval/151", "completion": "\n    if not lst:\n        return 0\n    \n    sum_of_squares = 0\n    \n    for num in lst:\n        if num < 0 or not isinstance(num, int):\n            continue\n            \n        if num % 2 == 1:\n            sum_of_squares += num ** 2\n            \n    return sum_of_squares\n"}
{"task_id": "HumanEval/152", "completion": "\n    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result\n"}
{"task_id": "HumanEval/153", "completion": "\n    strongest_extension = ''\n    max_strength = float('-inf')\n    for extension in extensions:\n        cap_count = sum(1 for c in extension if c.isupper())\n        sm_count = sum(1 for c in extension if c.islower())\n        strength = cap_count - sm_count\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return f'{class_name}.{strongest_extension}'\n"}
{"task_id": "HumanEval/154", "completion": "\n    if b in a:\n        return True\n    for i in range(1, len(b)):\n        b = b[1:] + b[0]\n        if b in a:\n            return True\n    return False\n"}
{"task_id": "HumanEval/155", "completion": "\n    num = abs(num)\n    even_count = 0\n    odd_count = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)\n"}
{"task_id": "HumanEval/156", "completion": "\n    roman_numerals = {\n        1: \"i\",\n        2: \"ii\",\n        3: \"iii\",\n        4: \"iv\",\n        5: \"v\",\n        6: \"vi\",\n        7: \"vii\",\n        8: \"viii\",\n        9: \"ix\",\n        10: \"x\",\n        20: \"xx\",\n        30: \"xxx\",\n        40: \"xl\",\n        50: \"l\",\n        60: \"lx\",\n        70: \"lxx\",\n        80: \"lxxx\",\n        90: \"xc\",\n        100: \"c\",\n        200: \"cc\",\n        300: \"ccc\",\n        400: \"cd\",\n        500: \"d\",\n        600: \"dc\",\n        700: \"dcc\",\n        800: \"dccc\",\n        900: \"cm\",\n        1000: \"m\",\n    }\n    result = \"\"\n    for numeral in (1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1):\n        while number >= numeral:\n            result += roman_numerals[numeral]\n            number -= numeral\n    return result.lower()\n"}
{"task_id": "HumanEval/157", "completion": "\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/158", "completion": "\n    max_unique_chars = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = set(word)\n        if len(unique_chars) > max_unique_chars:\n            max_unique_chars = len(unique_chars)\n            max_word = word\n        elif len(unique_chars) == max_unique_chars and word < max_word:\n            max_word = word\n\n    return max_word\n"}
{"task_id": "HumanEval/159", "completion": "\n    if need <= remaining:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]\n"}
{"task_id": "HumanEval/160", "completion": "\n    expression = \"\"\n    for i in range(len(operand)):\n        expression += str(operand[i])\n        if i < len(operator):\n            expression += operator[i]\n    return eval(expression)\n"}
{"task_id": "HumanEval/161", "completion": "\n    def reverse_case(ch):\n        if ch.islower():\n            return ch.upper()\n        elif ch.isupper():\n            return ch.lower()\n        else:\n            return ch\n\n    result = \"\"\n    for ch in s:\n        result += reverse_case(ch)\n\n    if not any(ch.isalpha() for ch in s):\n        result = result[::-1]\n\n    return result\n"}
{"task_id": "HumanEval/162", "completion": "\n    import hashlib\n    if not text:\n        return None\n    m = hashlib.md5()\n    m.update(text.encode('utf-8'))\n    return m.hexdigest()\n"}
{"task_id": "HumanEval/163", "completion": "\n    if a > b:\n        a, b = b, a\n    even_digits = []\n    for num in range(a, b + 1):\n        if num % 2 == 0:\n            even_digits.append(num)\n    return even_digits\n"}
